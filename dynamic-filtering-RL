{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":194947751,"sourceType":"kernelVersion"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install 'shimmy>=0.2.1'\n!pip install stable_baselines3\n!pip install --upgrade gym\n!pip install --upgrade stable-baselines3\n\nimport stable_baselines3 as sb\nfrom stable_baselines3.common.vec_env import DummyVecEnv\nfrom stable_baselines3 import PPO\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) \nimport matplotlib.pyplot as plt\nimport random\nimport keras\nimport gym\nfrom gym import spaces\nimport torch\nimport torch.nn as nn\nimport scipy.stats as stats\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.preprocessing import Binarizer\nfrom sklearn.preprocessing import MinMaxScaler\nfrom stable_baselines3.common.callbacks import EvalCallback \nfrom tqdm.notebook import tqdm\nimport timeseriesanalysis as tsa","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-04T14:29:57.370009Z","iopub.execute_input":"2024-09-04T14:29:57.370426Z","iopub.status.idle":"2024-09-04T14:31:13.427953Z","shell.execute_reply.started":"2024-09-04T14:29:57.370383Z","shell.execute_reply":"2024-09-04T14:31:13.426647Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: shimmy>=0.2.1 in /opt/conda/lib/python3.10/site-packages (1.3.0)\nRequirement already satisfied: numpy>=1.18.0 in /opt/conda/lib/python3.10/site-packages (from shimmy>=0.2.1) (1.26.4)\nRequirement already satisfied: gymnasium>=0.27.0 in /opt/conda/lib/python3.10/site-packages (from shimmy>=0.2.1) (0.29.0)\nRequirement already satisfied: cloudpickle>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from gymnasium>=0.27.0->shimmy>=0.2.1) (3.0.0)\nRequirement already satisfied: typing-extensions>=4.3.0 in /opt/conda/lib/python3.10/site-packages (from gymnasium>=0.27.0->shimmy>=0.2.1) (4.12.2)\nRequirement already satisfied: farama-notifications>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from gymnasium>=0.27.0->shimmy>=0.2.1) (0.0.4)\nRequirement already satisfied: stable_baselines3 in /opt/conda/lib/python3.10/site-packages (2.1.0)\nRequirement already satisfied: gymnasium<0.30,>=0.28.1 in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (0.29.0)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (1.26.4)\nRequirement already satisfied: torch>=1.13 in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (2.4.0+cpu)\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (3.0.0)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (2.2.2)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from stable_baselines3) (3.7.5)\nRequirement already satisfied: typing-extensions>=4.3.0 in /opt/conda/lib/python3.10/site-packages (from gymnasium<0.30,>=0.28.1->stable_baselines3) (4.12.2)\nRequirement already satisfied: farama-notifications>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from gymnasium<0.30,>=0.28.1->stable_baselines3) (0.0.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable_baselines3) (3.15.1)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable_baselines3) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable_baselines3) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable_baselines3) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable_baselines3) (2024.6.1)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (1.2.1)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (4.53.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (3.1.2)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable_baselines3) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->stable_baselines3) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->stable_baselines3) (2024.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->stable_baselines3) (1.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.13->stable_baselines3) (2.1.5)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.13->stable_baselines3) (1.3.0)\nRequirement already satisfied: gym in /opt/conda/lib/python3.10/site-packages (0.26.2)\nRequirement already satisfied: numpy>=1.18.0 in /opt/conda/lib/python3.10/site-packages (from gym) (1.26.4)\nRequirement already satisfied: cloudpickle>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from gym) (3.0.0)\nRequirement already satisfied: gym-notices>=0.0.4 in /opt/conda/lib/python3.10/site-packages (from gym) (0.0.8)\nRequirement already satisfied: stable-baselines3 in /opt/conda/lib/python3.10/site-packages (2.1.0)\nCollecting stable-baselines3\n  Downloading stable_baselines3-2.3.2-py3-none-any.whl.metadata (5.1 kB)\nRequirement already satisfied: gymnasium<0.30,>=0.28.1 in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (0.29.0)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (1.26.4)\nRequirement already satisfied: torch>=1.13 in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (2.4.0+cpu)\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (3.0.0)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (2.2.2)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from stable-baselines3) (3.7.5)\nRequirement already satisfied: typing-extensions>=4.3.0 in /opt/conda/lib/python3.10/site-packages (from gymnasium<0.30,>=0.28.1->stable-baselines3) (4.12.2)\nRequirement already satisfied: farama-notifications>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from gymnasium<0.30,>=0.28.1->stable-baselines3) (0.0.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable-baselines3) (3.15.1)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable-baselines3) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable-baselines3) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable-baselines3) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.13->stable-baselines3) (2024.6.1)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (1.2.1)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (4.53.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (3.1.2)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->stable-baselines3) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->stable-baselines3) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->stable-baselines3) (2024.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->stable-baselines3) (1.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.13->stable-baselines3) (2.1.5)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.13->stable-baselines3) (1.3.0)\nDownloading stable_baselines3-2.3.2-py3-none-any.whl (182 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m182.3/182.3 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: stable-baselines3\n  Attempting uninstall: stable-baselines3\n    Found existing installation: stable-baselines3 2.1.0\n    Uninstalling stable-baselines3-2.1.0:\n      Successfully uninstalled stable-baselines3-2.1.0\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nkaggle-environments 1.14.15 requires stable-baselines3==2.1.0, but you have stable-baselines3 2.3.2 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed stable-baselines3-2.3.2\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_states(num_samples, sampling_rate, min_lag, lag_step, num_lags, period, lookahead, degree):\n\n    signal = tsa.generate_srw(num_samples, sampling_rate)\n    ma = tsa.arithmetic_mean(signal, period)\n    lma = np.concatenate((ma[lookahead:], np.array([ma[-1] for i in range(lookahead)])))\n    ma_diffs = np.diff(ma, prepend=[0])\n    ldv_coeffs = tsa.lgd_to_poly_coeffs(tsa.lagged_difference_matrix(ma, min_lag, lag_step, num_lags)[:,int(lag_step*num_lags):].T, degree)\n    ma = ma[int(lag_step*num_lags):]\n    lma = lma[int(lag_step*num_lags):]\n\n    return ma, lma, ldv_coeffs, ma_diffs\n\n\ndef plot(estimates, lma, ma):\n    lma = lma[:-2]\n    ma = ma[:-2]\n    x = np.arange(len(estimates))\n\n    plt.style.use('dark_background')\n    plt.figure(figsize=(20,5))\n    \n    plt.plot(x, estimates, label='Estimates')\n    plt.plot(x, lma, label='LMA')\n    plt.plot(x, ma, label='MA')\n    \n    # Adding and customizing the legend\n    plt.legend(loc='upper right', fontsize='medium', title='Legend', shadow=True, fancybox=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T14:31:39.131650Z","iopub.execute_input":"2024-09-04T14:31:39.133160Z","iopub.status.idle":"2024-09-04T14:31:39.144952Z","shell.execute_reply.started":"2024-09-04T14:31:39.133106Z","shell.execute_reply":"2024-09-04T14:31:39.143596Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"class FilterEnv(gym.Env):\n\n    def __init__(self, num_samples, sampling_rate, min_lag, lag_step, num_lags, period, lookahead, degree, show_plot):\n        super(FilterEnv, self).__init__()\n        \n        self.action_space = spaces.Box(low=-16.0, high=16.0, shape=(1,), dtype=np.float32)\n        self.num_samples = num_samples\n        self.sampling_rate = sampling_rate\n        self.min_lag = min_lag\n        self.lag_step = lag_step\n        self.num_lags = num_lags\n        self.period = period\n        self.lookahead = lookahead\n        self.degree = degree\n        self.show_plot = show_plot\n        self.ma, self.lma, self.ldv_coeffs, self.ma_diffs = generate_states(self.num_samples, \n                                                                            self.sampling_rate, \n                                                                            self.min_lag, \n                                                                            self.lag_step, \n                                                                            self.num_lags, \n                                                                            self.period, \n                                                                            self.lookahead, \n                                                                            self.degree)\n        self.observation_space = spaces.Box(low=-2, high=2, shape=(self.ldv_coeffs.shape[1],) , dtype=np.float16)\n        self.current_step = 0\n        self.estimates = []\n        print(len(self.estimates), len(self.lma), len(self.ma), self.ldv_coeffs.shape[0])\n        \n    def step(self, action):\n\n        done = self.current_step == self.ldv_coeffs.shape[0]-2 #because when we increment the step at current_step = \"last\", we can't access self.ldv_coeffs[self.current_step]\n        if not done:\n\n            # Calculate baseline error (without the agent's action)\n            baseline_error = np.abs(self.ma[self.current_step] - self.lma[self.current_step])\n            # Calculate adjusted error (with the agent's action)\n            adjusted_error = np.abs(self.ma[self.current_step] + action - self.lma[self.current_step])\n            # Calculate the difference in errors\n            error_difference = baseline_error - adjusted_error\n            # Reward is the improvement in error, i.e., how much the agent reduced the error\n            reward = error_difference\n            self.estimates.append(self.ma[self.current_step] + action)\n            self.current_step += 1\n            observation = self.ldv_coeffs[self.current_step]\n            #print(self.current_step)\n\n        else:\n\n            if self.show_plot == True:\n                plot(self.estimates, self.lma, self.ma)\n            reward = 0\n            observation = self.ldv_coeffs[-1]\n\n        return observation, reward, done, {}\n\n\n    def reset(self):\n        # State parameters\n        self.ma, self.lma, self.ldv_coeffs, self.ma_diffs = generate_states(self.num_samples, \n                                                                            self.sampling_rate, \n                                                                            self.min_lag, \n                                                                            self.lag_step, \n                                                                            self.num_lags, \n                                                                            self.period, \n                                                                            self.lookahead, \n                                                                            self.degree)\n        self.current_step = 0\n        self.estimates = []\n\n        return self.ldv_coeffs[self.current_step]","metadata":{"execution":{"iopub.status.busy":"2024-09-04T14:31:41.810987Z","iopub.execute_input":"2024-09-04T14:31:41.811547Z","iopub.status.idle":"2024-09-04T14:31:41.827447Z","shell.execute_reply.started":"2024-09-04T14:31:41.811492Z","shell.execute_reply":"2024-09-04T14:31:41.825964Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"#LDV Params\nmin_lag = 1\nlag_step = 1\nnum_lags = 60\n\n#env params\nnum_samples = 1080*10\nep_length = num_samples-((lag_step*num_lags)+min_lag)\nshow_plot = False\nnum_envs = 10\nsampling_rate = 80\ndegree = 4\nperiod = 40\nlookahead = 10\nepisodes = 20\niteration_timesteps = ep_length*num_envs\n\nenv = DummyVecEnv([lambda: FilterEnv(num_samples, sampling_rate, min_lag, lag_step, num_lags, period, lookahead, degree, show_plot) for _ in range(num_envs)])\n#env = RWTrading(num_samples, sampling_rate, min_lag, lag_step, num_lags, prediction_horizon, show_plot)\neval_env = FilterEnv(num_samples, sampling_rate, min_lag, lag_step, num_lags, period, lookahead, degree, True)\neval_callback = EvalCallback(eval_env, best_model_save_path='/kaggle/working/', log_path='/kaggle/working/', eval_freq=ep_length, deterministic=True, render=False, n_eval_episodes=8)\n\n# Custom MLP policy args\npolicy_kwargs = dict(activation_fn=torch.nn.Tanh, net_arch=[256, 256, 128])\n\nprint(ep_length, lag_step, num_lags, min_lag)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T18:54:54.957993Z","iopub.execute_input":"2024-09-03T18:54:54.958378Z","iopub.status.idle":"2024-09-03T18:54:55.651730Z","shell.execute_reply.started":"2024-09-03T18:54:54.958340Z","shell.execute_reply":"2024-09-03T18:54:55.650491Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n0 10740 10740 10740\n10739 1 60 1\n","output_type":"stream"}]},{"cell_type":"code","source":"def nest_validation():\n\n    cumulative_reward = 0\n    # Example usage\n    actions = []\n    observation = eval_env.reset()\n    for _ in range(ep_length):\n        action = eval_env.action_space.sample()+1  # Random action\n        actions.append(action)\n        observation, reward, done, _ = eval_env.step(action)\n        #print(\"action: \", action)\n        cumulative_reward += reward\n        if done:\n            break\n    \n    print(cumulative_reward)\n    # Close the environment\n    eval_env.close()\n    return actions\n\nacts = nest_validation()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T18:54:55.653769Z","iopub.execute_input":"2024-09-03T18:54:55.654650Z","iopub.status.idle":"2024-09-03T18:54:57.279375Z","shell.execute_reply.started":"2024-09-03T18:54:55.654592Z","shell.execute_reply":"2024-09-03T18:54:57.278058Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"[-86496.1]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"model = sb.PPO(\"MlpPolicy\",\n            env,\n            learning_rate=0.0003,\n            n_steps=num_envs*300,\n            batch_size=64,\n            n_epochs=100,\n            gamma=0.99,\n            gae_lambda=0.95,\n            clip_range=0.2,\n            clip_range_vf=None,\n            normalize_advantage=True,\n            ent_coef=0.0,\n            vf_coef=0.5,\n            max_grad_norm=0.5,\n            use_sde=False,\n            sde_sample_freq=-1,\n            rollout_buffer_class=None,\n            rollout_buffer_kwargs=None,\n            target_kl=None,\n            stats_window_size=3,\n            tensorboard_log=None,\n            policy_kwargs=None,\n            verbose=0,\n            seed=None,\n            device='auto',\n            _init_setup_model=True)\n\n\nmodel.learn(total_timesteps=iteration_timesteps*episodes, progress_bar=True, callback=eval_callback)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T18:54:57.280699Z","iopub.execute_input":"2024-09-03T18:54:57.281063Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/ppo/ppo.py:155: UserWarning: You have specified a mini-batch size of 64, but because the `RolloutBuffer` is of size `n_steps * n_envs = 30000`, after every 468 untruncated mini-batches, there will be a truncated mini-batch of size 48\nWe recommend using a `batch_size` that is a factor of `n_steps * n_envs`.\nInfo: (n_steps=3000 and n_envs=10)\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ec06732b4e39458fa9000b297c85a74a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=107390, episode_reward=-9709.86 +/- 436.12\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=107390, episode_reward=-9709.86 +/- 436.12\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=214780, episode_reward=-8184.95 +/- 285.11\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=214780, episode_reward=-8184.95 +/- 285.11\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/tmp/ipykernel_36/3355000951.py:20: RuntimeWarning: More than 20 figures have been opened. Figures created through \nthe pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much \nmemory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using \n`matplotlib.pyplot.close()`.\n  plt.figure(figsize=(20,5))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/tmp/ipykernel_36/3355000951.py:20: RuntimeWarning: More than 20 figures have been opened. Figures created through \nthe pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much \nmemory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using \n`matplotlib.pyplot.close()`.\n  plt.figure(figsize=(20,5))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=322170, episode_reward=-7523.62 +/- 312.81\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=322170, episode_reward=-7523.62 +/- 312.81\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=429560, episode_reward=-6952.19 +/- 249.92\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=429560, episode_reward=-6952.19 +/- 249.92\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=536950, episode_reward=-6540.93 +/- 211.73\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=536950, episode_reward=-6540.93 +/- 211.73\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=644340, episode_reward=-6292.41 +/- 334.92\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=644340, episode_reward=-6292.41 +/- 334.92\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=751730, episode_reward=-5916.00 +/- 182.58\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=751730, episode_reward=-5916.00 +/- 182.58\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=859120, episode_reward=-6115.09 +/- 159.54\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=859120, episode_reward=-6115.09 +/- 159.54\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=966510, episode_reward=-5747.39 +/- 228.88\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=966510, episode_reward=-5747.39 +/- 228.88\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1073900, episode_reward=-5948.45 +/- 145.19\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1073900, episode_reward=-5948.45 +/- 145.19\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1181290, episode_reward=-5751.14 +/- 108.99\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1181290, episode_reward=-5751.14 +/- 108.99\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1288680, episode_reward=-5722.97 +/- 89.49\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1288680, episode_reward=-5722.97 +/- 89.49\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1396070, episode_reward=-5799.35 +/- 140.77\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1396070, episode_reward=-5799.35 +/- 140.77\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1503460, episode_reward=-5799.95 +/- 106.39\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1503460, episode_reward=-5799.95 +/- 106.39\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1610850, episode_reward=-5757.66 +/- 187.09\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1610850, episode_reward=-5757.66 +/- 187.09\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1718240, episode_reward=-5808.29 +/- 80.62\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1718240, episode_reward=-5808.29 +/- 80.62\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1825630, episode_reward=-5848.27 +/- 188.93\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1825630, episode_reward=-5848.27 +/- 188.93\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/opt/conda/lib/python3.10/site-packages/stable_baselines3/common/evaluation.py:67: UserWarning: Evaluation \nenvironment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and \nrewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n  warnings.warn(\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Eval num_timesteps=1933020, episode_reward=-5696.89 +/- 100.82\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Eval num_timesteps=1933020, episode_reward=-5696.89 +/- 100.82\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Episode length: 10739.00 +/- 0.00\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Episode length: 10739.00 +/- 0.00\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"New best mean reward!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">New best mean reward!\n</pre>\n"},"metadata":{}}]}]}